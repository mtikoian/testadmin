--  SQL 2005 and SQL 2008 Standards Checkout Script
--  Date: 4/15/2010
--  Version 1.00.004
--  Written By: Steve Terebecki
--
--
-- Version 1.00.004 Updates - Fixed Database checkout - use System Checkout Version 1.04
-- Version 1.00.003 Updates - Fixed Memory calculations 
-- Version 1.00.002 Updates - Removed Legacy Security Groups/Accounts
--
--
--
--




SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
declare @systemcheckout varchar(128)


-- Determine if SQL 2000 or SQL 2005/2008

--  ProductVersion
set @systemcheckout = NULL
select @systemcheckout =  CONVERT(char(20), SERVERPROPERTY('ProductVersion'));
if substring(@systemcheckout,1,1) != '8'
	begin
		declare @clustercheckout varchar(40)
		declare @SystemDiskCheckOut varchar(256)
		declare @checkAccounts varchar (40)
		declare @userOptions sql_variant
		declare @userOptionsMath int
		declare @isSQLClustered int
		declare @counter int
		declare @tmpCounter int
		declare @OSMemory bigint
		declare @SQLMemory bigint
		declare @OSProcessors int
		declare @returncode int
		declare @registryReturn int
		declare @registryReturnStr varchar(512)
		declare @registryDir nvarchar(300)
		declare @instanceName nvarchar(200)
		declare @instanceNameReg nvarchar(200)
		declare @osIPAddress nvarchar(20)
		declare @osDomain nvarchar(50)
		declare @binariesPath nvarchar(100)
		declare @sqlStartup int
		declare @sqlServiceAccount nvarchar(100)
-----
		set @systemcheckout = NULL
		select @systemcheckout =  CONVERT(char(128), SERVERPROPERTY('MachineName'));

		print ''
		print '-------------------------------SQL 2005 Server Checkout Script--------------------------------'
		print 'Report generation date: ' + convert(varchar,getdate()) + '      Generated by ' + system_user
		print 'Source system: ' + HOST_NAME () + '                  ' + 'Target System: ' + @systemcheckout
		--
				set @instanceName = coalesce(convert(nvarchar(100),serverproperty('InstanceName')),'MSSQLSERVER');                        
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\Microsoft SQL Server\Instance Names\SQL', @instanceName, @instanceNameReg output;
		SET @registryDir = N'Software\Microsoft\Microsoft SQL Server\' + @instanceNameReg +'\MSSQLServer\supersocketnetlib\TCP\IP1';
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', @registryDir,@value_name='IpAddress',@value=@osIPAddress OUTPUT;

		SET @registryDir = N'SYSTEM\ControlSet001\Services\Tcpip\Parameters\';
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', @registryDir,@value_name='Domain',@value=@osDomain OUTPUT;
		-- use later
		if @instanceName !='MSSQLSERVER'
			Set @instanceName='MSSQL$'+@instanceName;
		SET @registryDir = N'SYSTEM\CurrentControlSet\Services\'+@instanceName;
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', @registryDir,@value_name='ImagePath',@value=@binariesPath OUTPUT;
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', @registryDir,@value_name='Start',@value=@sqlStartup OUTPUT;
		exec master.dbo.xp_regread N'HKEY_LOCAL_MACHINE', @registryDir,@value_name='ObjectName',@value=@sqlServiceAccount OUTPUT;

		print 'Target System IP Address: ' + @osIPAddress + '       Target System Domain: ' + @osDomain
		print ''
		--  SQL Version Standards Checkout
		print '-----------------------------------SQL Version Standards Checkout-----------------------------------'
		--  Edition

		set @systemcheckout = NULL
		select @systemcheckout =  CONVERT(char(128), SERVERPROPERTY('Edition'));
		print 'Product: Microsoft SQL Server ' + convert(varchar,@systemcheckout)

		--  ProductVersion
		set @systemcheckout = NULL
		select @systemcheckout =  CONVERT(char(20), SERVERPROPERTY('ProductVersion'));

		--SP3 = 9.00.4035.00
		if @systemcheckout < '9.00.4035.00'
			begin
				print 'SQL Product Version: '+ RTRIM(@systemcheckout) + '- NON STANDARD'
			end
		else
			begin
				print 'SQL Product Version: '+ @systemcheckout
			end 


		print ''
		--  SQL Security Standards Checkout
		print '-----------------------------------SQL Security Standards Checkout-----------------------------------'

--  User and Group Validation
		print 'User and Group Validation'
		set @checkAccounts = NULL
		select @checkAccounts = name from sys.server_principals where name = 'BUILTIN\Administrators'
		if @checkAccounts is not null
			begin
				print 'BUILTIN\Administrators ACCOUNT: PRESENT - NON STANDARD'
			end
		else
			begin
				print 'BUILTIN\Administrators account: Not present'
			end

		--print ''
		set @checkAccounts = NULL
		select @checkAccounts = name from sys.server_principals where name = 'US\W9_SQL_DBA_AD'
		if @checkAccounts is not null
			begin
				print 'US\W9_SQL_DBA_AD group: Present'
			end
		else
			begin
				print 'US\W9_SQL_DBA_AD group: Not present - NON STANDARD'
			end

		--  SQL 2005 Configuration Standards Checkout
		print ''
		print'-------------------------------SQL 2005 Configuration Standards Checkout-------------------------------'
		set @systemcheckout = NULL
		select @systemcheckout =  CONVERT(char(20), SERVERPROPERTY('InstanceName'));
		If @systemcheckout is not null
		begin
			if len(@systemcheckout) = 5
			begin	
				if upper(substring(@systemcheckout,1,3)) = 'CON'
				begin
					Goto Instance_Test
				end
				if upper(substring(@systemcheckout,1,3)) = 'SQL'
				begin
					Goto Instance_Test
				end
			end
			else
			begin
				print 'SQL Instance name: ' + @systemcheckout + '- NON STANDARD'
				Goto Skip_Instance_Test
			end 
		 

		Instance_Test:
					if substring(@systemcheckout,4,2) > 0 and substring(@systemcheckout,4,2) < 99
						begin
							print 'SQL Instance name: ' + @systemcheckout
							
						end

					else
						begin
							print 'SQL Instance name: ' + @systemcheckout + '- NON STANDARD'
						end
		Skip_Instance_Test: 
		end
		else
		begin
			print 'SQL Instance: None detected - NON STANDARD' 
		end 

		---				else print 'SQL Instance name: ' + @systemcheckout + '- NON STANDARD' 
		print ''
		print '+++++++++++++ Location of All SQL System Data, Log and TEMPDB Files  +++++++++++++'

		-- MASTER DATABASE---------------------------------------------------------------------------------------------------- 
		-- G: drive
		set @tmpCounter = 1
		set @counter = 0

		SELECT @counter = count(*) FROM sys.master_files WHERE database_id = DB_ID(N'master')

		While (@tmpCounter < @counter + 1)
		BEGIN
		With SystemDiskCheckOut AS 
			( 
			select *, ROW_Number()OVER(order by file_id) as 'RowNumber' from sys.master_files where database_id = 		DB_ID(N'master')
			)
		select @SystemDiskCheckOut = (select physical_name from SystemDiskCheckOut Where RowNumber = @tmpCounter)

		If substring(@SystemDiskCheckOut,1,2) = 'G:'
			begin
				print 'Master: ' + RTRIM(@SystemDiskCheckOut); 
			end 
		else
			begin
				print 'Master: ' + RTRIM(@SystemDiskCheckOut) + ' - NON STANDARD' ;
			end 

		Select @tmpCounter = @tmpCounter + 1
		END;


		-- MSDB DATABASE----------------------------------------------------------------------------------------------------
		-- G: drive
		set @tmpCounter = 1
		set @counter = 0

		SELECT @counter = count(*) FROM sys.master_files WHERE database_id = DB_ID(N'msdb')

		While (@tmpCounter < @counter + 1)
		BEGIN
		With SystemDiskCheckOut AS 
			( 
			select *, ROW_Number()OVER(order by file_id) as 'RowNumber' from sys.master_files where database_id = DB_ID(N'msdb')
			)
		select @SystemDiskCheckOut = (select physical_name from SystemDiskCheckOut Where RowNumber = @tmpCounter)


		If substring(@SystemDiskCheckOut,1,2) = 'G:'
			begin
				print 'MSDB: ' + RTRIM(@SystemDiskCheckOut); 
			end 
		else
			begin
				print 'MSDB: ' + RTRIM(@SystemDiskCheckOut) + ' - NON STANDARD' ;
			end 

		Select @tmpCounter = @tmpCounter + 1
		END;


		-- MODEL DATABASE----------------------------------------------------------------------------------------------------
		-- G: drive
		set @tmpCounter = 1
		set @counter = 0

		SELECT @counter = count(*) FROM sys.master_files WHERE database_id = DB_ID(N'model')

		While (@tmpCounter < @counter + 1)
		BEGIN
		With SystemDiskCheckOut AS 
			( 
			select *, ROW_Number()OVER(order by file_id) as 'RowNumber' from sys.master_files where database_id = DB_ID(N'model')
			)
		select @SystemDiskCheckOut = (select physical_name from SystemDiskCheckOut Where RowNumber = @tmpCounter)

		If substring(@SystemDiskCheckOut,1,2) = 'G:'
			begin
				print 'Model: ' + RTRIM(@SystemDiskCheckOut); 
			end 
		else
			begin
				print 'Model: ' + RTRIM(@SystemDiskCheckOut) + ' - NON STANDARD' ;
			end 

		Select @tmpCounter = @tmpCounter + 1
		END;


		-- TEMPDB DATABASE----------------------------------------------------------------------------------------------------
		-- G: drive
		set @tmpCounter = 1
		set @counter = 0

		SELECT @counter = count(*) FROM sys.master_files WHERE database_id = DB_ID(N'tempdb')

		While (@tmpCounter < @counter + 1)
		BEGIN
		With SystemDiskCheckOut AS 
			( 
			select *, ROW_Number()OVER(order by file_id) as 'RowNumber' from sys.master_files where database_id = 		DB_ID(N'tempdb')
			)
		select @SystemDiskCheckOut = (select physical_name from SystemDiskCheckOut Where RowNumber = @tmpCounter)

		If substring(@SystemDiskCheckOut,1,2) = 'G:'
			begin
				print 'TempDB: ' + RTRIM(@SystemDiskCheckOut); 
			end 
		else
			begin
				print 'TempDB: ' + RTRIM(@SystemDiskCheckOut) + ' - NON STANDARD' ;
			end 
		Select @tmpCounter = @tmpCounter + 1
		END;


		-- Check Maintenance Plans----------------------------------------------------------------------------------------
		print ''
		if exists(select * from msdb.dbo.sysmaintplan_plans where name = 'System Databases') 
				begin
					print 'System Databases: Maintenence Plan Present';
				end
			else
				begin
					print 'System Databases: Maintenence Plan Not Present - NON STANDARD';
				end

		if exists(select * from msdb.dbo.sysmaintplan_plans where name = 'User Databases') 
				begin
					print 'User Databases: Maintenence Plan Present';
				end
			else
				begin
					print 'User Databases: Maintenence Plan Not Present - NON STANDARD';
				end

		print ''
		print '+++++++++++++ Server Properties - General +++++++++++++'

		--  Memory------------------------------------------------------
		select @OSMemory = (physical_memory_in_bytes/1024000 )from sys.dm_os_sys_info
		print 'OS System Memory: ' + convert(varchar,@OSMemory) + ' (MB)'
		if @OSMemory > 8192000000
		begin

			set @systemcheckout = NULL
			select @systemcheckout =  CONVERT(char(128), SERVERPROPERTY('Edition'));
			If right(rtrim(@systemcheckout),7) <> '64-bit)'
			begin
				select @systemcheckout = cast(value_in_use as int) from sys.configurations where name = 'awe enabled'
				--if CAST(@systemcheckout AS int) = 1
				if @systemcheckout = 1
				begin
					print 'AWE: Enabled'
				end
				else
				begin
					print 'AWE: Disabled - NON STANDARD'
				end
			end
			else
			begin
				select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where name = 'awe enabled'
				if CAST(@systemcheckout AS int) = 1
				begin
					print 'AWE: Enabled - NON STANDARD'
				end
				else
				begin
					print 'AWE: Disabled'
				end				
			end
		end

		--  Processors-----------------------------------------------------
		set @OSProcessors = NULL
		select @OSProcessors = cpu_count from sys.dm_os_sys_info
		print 'Processors: ' + convert(varchar,@OSProcessors)

		If upper(substring(@binariesPath ,2,2)) = 'E:'
			begin
				print 'Root Directory: ' + RTRIM(@binariesPath)
			end
		else
			begin
				print 'Root Directory: ' + RTRIM(@binariesPath) + '- NON STANDARD'
			end

		--  Server Collation
		set @systemcheckout = NULL
		select @systemcheckout =  CONVERT(char(128), SERVERPROPERTY('Collation'));
		--print 'Server Collation: ' + convert(varchar,@systemcheckout)
		-- Collation Standard = SQL_Latin1_General_CP1_CI_AS

		if @systemcheckout <> 'SQL_Latin1_General_CP1_CI_AS'
			begin
				print 'Server Collation: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Server Collation: ' + @systemcheckout
			end


		--  Server Clustered
		set @isSQLClustered = NULL
		select @isSQLClustered =  convert(int,SERVERPROPERTY('IsClustered'));
		If @isSQLClustered = 1
			begin
				print 'Is Clustered: True' 
			end 
		else
			begin
				print 'Is Clustered: False'
			end  




		--  System Check out-------------------------------------------------------------------------------------------------
		print ''
		print '+++++++++++++ Server Properties - Memory +++++++++++++'

		--set @systemcheckout = NULL
	--@SQLMemory
		--select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1544
		select @SQLMemory = cast(value_in_use as bigint) from sys.configurations where configuration_id = 1544
		if  @SQLMemory < (@OSMemory * .905) and @SQLMemory > @OSMemory * .895
			begin
				print 'Max server memory (MB): ' + cast((@SQLMemory) as varchar)
			end
		else
			begin
				print 'Max server memory (MB): ' + cast(@SQLMemory as varchar) + '- NON STANDARD'
				print '--Set Max server memory to 90% of available OS memory: ' + cast(@OSMemory as varchar) + '(MB)'
				print '--Set between these values: ' + cast(((@OSMemory)* .895) as varchar) + '(MB) and '+ cast(((@OSMemory)* .905) as varchar) + '(MB)'
			end


		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1543
		if convert(bigint,@systemcheckout) > 0
			begin
				print 'Min server memory (MB): ' + @systemcheckout + ' - NON STANDARD'
			end
		else
			begin
				print 'Min server memory (MB): ' + @systemcheckout
			end


		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1505
		if convert(bigint,@systemcheckout) > 0
			begin
				print 'Memory for index create sorts (kBytes): ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Memory for index create sorts (kBytes): ' + @systemcheckout
			end


		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1540
		if convert(bigint,@systemcheckout) <> 1024
			begin
				print 'Min memory per query (KB): ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Min memory per query (KB): ' + @systemcheckout
			end

		print ''
		print '+++++++++++++ Server Properties - Processors +++++++++++++'
		--@OSProcessors
		-- 32 bit evaluate upto 32 processors
		-- Only Processor Affinity configurable 
		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1535
		if @OSProcessors < 8
			begin
				if @systemcheckout = 0
					begin
						print 'Processor affinity mask: ' + @systemcheckout
					end
				else
					begin
						print 'Processor affinity mask: ' + @systemcheckout + '- NON STANDARD'
					end
			end
		else
			begin
				if @systemcheckout = 0
					begin
						print 'Processor affinity mask: ' + @systemcheckout + '- NON STANDARD'
					end
				else
					Begin
				----  should only have 1 exempted
					if @OSProcessors = 8
						begin
						if @systemcheckout <> 127
							print 'Processor affinity mask: ' + @systemcheckout + '- NON STANDARD'
						else
							print 'Processor affinity mask: ' + @systemcheckout
						end
					if @OSProcessors = 16
						begin
						if @systemcheckout <> 32767
							print 'Processor affinity mask: ' + @systemcheckout + '- NON STANDARD'
						else
							print 'Processor affinity mask: ' + @systemcheckout
						end
					if @OSProcessors = 32
						begin
						if @systemcheckout <> 2147483647
							print 'Processor affinity mask: ' + @systemcheckout + '- NON STANDARD'
						else
							print 'Processor affinity mask: ' + @systemcheckout
						end
					end
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1550
		if @systemcheckout <> 0
			begin
				print 'Processor affinity I/O mask: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Processor affinity I/O mask: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 503
		if @systemcheckout <> 0
			begin
				print 'Maximum worker threads: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Maximum worker threads: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1517
		if @systemcheckout <> 0
			begin
				print 'Priority boost: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Priority boost: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1546
		if @systemcheckout <> 0
			begin
				print 'User mode scheduler uses lightweight pooling: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'User mode scheduler uses lightweight pooling: ' + @systemcheckout
			end



		-----------------------------SECURITY-------------------------------------------------------------------------------------
		print ''
		print '+++++++++++++ Server Properties - Security +++++++++++++'

		set @returncode = NULL
		exec @returncode = master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', 		N'LoginMode', @registryReturn output, 'no_output'
		If @registryReturn <> 1
			begin
				print 'Server Authentication Mode: ' + convert(varchar,@registryReturn) + '- NON STANDARD'
			end
		else
			begin
				print 'Server Authentication Mode:' + convert(varchar,@registryReturn)
			end


		set @returncode = NULL
		exec @returncode = master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', 		N'AuditLevel', @registryReturn output, 'no_output'
		If @registryReturn <> 2
			begin
				print 'Login Auditing: ' + convert(varchar,@registryReturn) + '- NON STANDARD'
			end
		else
			begin
				print 'Login Auditing:' + convert(varchar,@registryReturn)
			end


		set @checkAccounts = NULL
		select @checkAccounts = name from sys.credentials where name = '##xp_cmdshell_proxy_account##'
		if @checkAccounts IS NOT NULL 
			begin
				print 'Enable server proxy account: Enabled- NON STANDARD'
			end
		else
			begin
				print 'Enable server proxy account: Disabled'
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 544
		if @systemcheckout <> 0
			begin
				print 'c2 audit mode: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'c2 audit mode: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 400
		if @systemcheckout <> 0
			begin
				print 'Allow cross db ownership chaining: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Allow cross db ownership chaining: ' + @systemcheckout
			end


		print ''
		print '+++++++++++++ Server Properties - Connections +++++++++++++'

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 103
		if @systemcheckout <> 0
			begin
				print 'Max Number of user connections allowed: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Max Number of user connections allowed: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1545
		if @systemcheckout <> 0
			begin
				print 'Maximum estimated cost allowed by query governor (0 if Disabled): ' + @systemcheckout + '- NON 		STANDARD'
			end
		else
			begin
				print 'Maximum estimated cost allowed by query governor (0 if Disabled): ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @userOptionsMath = cast(value_in_use as int) from sys.configurations where configuration_id = 1534
		if @userOptionsMath >= 16384
			begin
				print 'User options: Xact abort - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 16384
			end
		Else
			begin
				print 'User options: Xact abort - Disabled'
			end

		if @userOptionsMath >= 8192
			begin
				print 'User options: Numeric round abort - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 8192
			end
		Else
			begin
				print 'User options: Numeric round abort - Disabled'
			end

		if @userOptionsMath >= 4096
			begin
				print 'User options: Concat null yields null - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 4096
			end
		Else
			begin
				print 'User options: Concat null yields null - Disabled'
			end

		if @userOptionsMath >= 2048
			begin
				print 'User options: ANSI NULL Default Off - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 2048
			end
		Else
			begin
				print 'User options: ANSI NULL Default Off - Disabled'
			end

		if @userOptionsMath >= 1024
			begin
				print 'User options: ANSI NULL Default On - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 1024
			end
		Else
			begin
				print 'User options: ANSI NULL Default On - Disabled'
			end

		if @userOptionsMath >= 512
			begin
				print 'User options: No count - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 512
			end
		Else
			begin
				print 'User options: No count - Disabled'
			end

		if @userOptionsMath >= 256
			begin
				print 'User options: Quoted identifier - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 256
			end
		Else
			begin
				print 'User options: Quoted identifier - Disabled'
			end

		if @userOptionsMath >= 128
			begin
				print 'User options: Arithmetic ignore - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 128
			end
		Else
			begin
				print 'User options: Arithmetic ignore - Disabled'
			end

		if @userOptionsMath >= 64
			begin
				print 'User options: Arithmetic abort - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 64
			end
		Else
			begin
				print 'User options: Arithmetic abort - Disabled'
			end

		if @userOptionsMath >= 32
			begin
				print 'User options: ANSI NULLS - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 32
			end
		Else
			begin
				print 'User options: ANSI NULLS - Disabled'
			end

		if @userOptionsMath >= 16
			begin
				print 'User options: ANSI padding - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 16
			end
		Else
			begin
				print 'User options: ANSI padding - Disabled'
			end

		if @userOptionsMath >= 8
			begin
				print 'User options: ANSI warning - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 8
			end
		Else
			begin
				print 'User options: ANSI warning - Disabled'
			end

		if @userOptionsMath >= 4
			begin
				print 'User options: cursor close on commit - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 4
			end
		Else
			begin
				print 'User options: cursor close on commit - Disabled'
			end

		if @userOptionsMath >= 2
			begin
				print 'User options: implicit transactions - Enabled - NON STANDARD'
				Select @userOptionsMath = @userOptionsMath - 2
			end
		Else
			begin
				print 'User options: implicit transactions - Disabled'
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 117
		if @systemcheckout <> 1
			begin
				print 'Allow remote connections to server: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Allow remote connections to server: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1520
		if @systemcheckout <> 600
			begin
				print 'Remote query timeout: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Remote query timeout: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 542
		if @systemcheckout <> 0
			begin
				print 'Require distributed transactions for server to server communications: ' + @systemcheckout + '- NON 		STANDARD'
			end
		else
			begin
				print 'Require distributed transactions for server to server communications: ' + @systemcheckout
			end



		print ''
		print '+++++++++++++ Server Properties - Database Settings +++++++++++++'

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 109
		if @systemcheckout <> 0
			begin
				print 'Default index fill factor: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Default index fill factor: ' + @systemcheckout
			end

		set @returncode = NULL
		exec @returncode = master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', 		N'Tapeloadwaittime', @registryReturn output, 'no_output'
		If @registryReturn <> -1
			begin
				print 'Specify how long SQL Server will wait for a new tape: ' + convert(varchar,@registryReturn) + '- NON 		STANDARD'
			end
		else
			begin
				print 'Specify how long SQL Server will wait for a new tape:' + convert(varchar,@registryReturn)
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 101
		if @systemcheckout <> 0
			begin
				print 'Default backup media retention: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Default backup media retention: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1537
		if @systemcheckout <> 0
			begin
				print 'Recovery intervals: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Recovery intervals: ' + @systemcheckout
			end
		/*
		--------------------------------------------------------
		----------------------------------------------------------
		---- NEEDS WORK ERRORS OUT--------------------------------
		----------------------------------------------------------
		----------------------------------------------------------
		set @returncode = NULL
		set @registryReturnStr = NULL
		begin try
			exec @returncode = master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'DefaultData', @registryReturnStr output
		end try
		begin catch
			print convert(varchar,@returncode)
			print convert(varchar,ERROR_NUMBER())
			print 'Database default locations: Data: NONE SPECIFIED - NON STANDARD'
			goto Log_Drive;
		end catch

		If upper(substring(@registryReturnStr,1,2)) <> 'G:'
			begin
				print 'Database default locations: Data: ' + RTRIM(@registryReturnStr) + '- NON STANDARD'
			end
		else
			begin
				print 'Database default locations: Data:' + RTRIM(@registryReturnStr)
			end
		Log_Drive:
		set @returncode = NULL
		exec @returncode = master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', 		N'DefaultLog', @registryReturnStr output, 'no_output'
		If upper(substring(@registryReturnStr,1,2)) <> 'H:'
			begin
				print 'Database default locations: Log: ' + RTRIM(@registryReturnStr) + '- NON STANDARD'
			end
		else
			begin
				print 'Database default locations: Log:' + RTRIM(@registryReturnStr)
			end
		*/


		print ''
		print '+++++++++++++ Server Properties - Advanced +++++++++++++'

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 115
		if @systemcheckout <> 1
			begin
				print 'Allow Triggers to fire others: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Allow Triggers to fire others: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1531
		if @systemcheckout <> -1
			begin
				print 'Cursor Threshold: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Cursor Threshold: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1126
		if @systemcheckout <> 1033
			begin
				print 'Default Full-Text Language: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Default Full-Text Language: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 124
		if @systemcheckout <> 0
			begin
				print 'Default Language: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Default Language: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1536
		if @systemcheckout <> 65536
			begin
				print 'Max Text Replication Size: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Max Text Replication Size: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1547
		if @systemcheckout <> 0
			begin
				print 'Scan for Startup Procs: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Scan for Startup Procs: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1127
		if @systemcheckout <> 2049
			begin
				print 'Two Digit Year Cutoff: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Two Digit Year Cutoff: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 505
		if @systemcheckout <> 4096
			begin
				print 'Network Packet Size: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Network Packet Size: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1519
		if @systemcheckout <> 20
			begin
				print 'Remote Login Timeout: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Remote Login Timeout: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1538
		if @systemcheckout <> 5
			begin
				print 'Cost Threshold for Parallelism: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Cost Threshold for Parallelism: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 106
		if @systemcheckout <> 0
			begin
				print 'Locks: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Locks: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1539
		if @systemcheckout <> 0
			begin
				print 'Max Degree of Parallelism: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Max Degree of Parallelism: ' + @systemcheckout
			end

		set @systemcheckout = NULL
		select @systemcheckout = cast(value_in_use as varchar) from sys.configurations where configuration_id = 1541
		if @systemcheckout <> -1
			begin
				print 'Query Wait: ' + @systemcheckout + '- NON STANDARD'
			end
		else
			begin
				print 'Query Wait: ' + @systemcheckout
			end


		print ''
		--  Cluster Check out
		print'-----------------------------------------Cluster Check out-----------------------------------------'
		--set @clustercheckout = NULL
		--select top(1) @clustercheckout =  NodeName from sys.dm_os_cluster_nodes



		--If @clustercheckout is not null
		If @isSQLClustered = 1
		Begin

		--print'This System is clustered'

		print 'Node A: ' + convert(varchar,@clustercheckout);

		With ClusterCheckOut AS 
			( 
			select NodeName, ROW_Number()OVER(order by NodeName) as 'RowNumber' from sys.dm_os_cluster_nodes
			)
		select @clustercheckout = (select NodeName from ClusterCheckOut Where RowNumber = 2)

		print 'Node B: ' + convert(varchar,@clustercheckout); 

		select @counter = count(DriveName) from sys.dm_io_cluster_shared_drives;
		print 'Clustered drives '
		set @tmpCounter = 1
		While (@tmpCounter < @counter + 1)
		BEGIN
		With ClusterCheckOut AS 
			( 
			select DriveName, ROW_Number()OVER(order by DriveName) as 'RowNumber' from sys.dm_io_cluster_shared_drives
			)
		select @clustercheckout = (select DriveName from ClusterCheckOut Where RowNumber = @tmpCounter)
		print ': ' + convert(varchar,@clustercheckout);
		--print @clustercheckout;
		Select @tmpCounter = @tmpCounter + 1
		END;

		print ''
		print 'Determine SQL Cluster Group used: '
		select @checkAccounts = name from sys.server_principals where name = 'US\SQLDBAClusters'
		if @checkAccounts is not null
			begin
			print 'US\SQLDBAClusters account is present'
			end
		else
			begin
			print 'US\SQLDBAClusters account is not present'
			end
		End
		Else
			begin
			print'This System is not clustered, bypassing cluster checkout'
			end




	end
else
	begin

--------SQL 2000
		print 'SQL Product Version: '+ @systemcheckout
	end 
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
select name, database_id,owner_sid,recovery_model, recovery_model_desc, compatibility_level, is_auto_close_on, is_auto_create_stats_on, is_auto_shrink_on, is_auto_update_stats_on, is_auto_update_stats_async_on, is_cursor_close_on_commit_on, is_local_cursor_default, is_ansi_null_default_on, is_ansi_nulls_on, is_ansi_padding_on, is_arithabort_on, is_concat_null_yields_null_on, is_db_chaining_on, is_date_correlation_on, is_numeric_roundabort_on, is_parameterization_forced, is_quoted_identifier_on, is_recursive_triggers_on, is_trustworthy_on, page_verify_option, is_read_only, state, user_access from sys.databases
go