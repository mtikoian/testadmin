foreach ($table in $smoTables)
{
    $prikey = $table.Indexes | Where-Object {$_.IndexKeyType -eq [Microsoft.SqlServer.Management.Smo.IndexKeyType]::DriPrimaryKey}
    if ($prikey -eq $null)
    {
        Write-Warning "Table '$($table.Name)' does not have a primary key and will be skipped."
        continue
    }
    
    #region Get
    $procName = "Get" + (Format-ColumnNameForProcedure -Name $table.Name) + "By" + [String]::Join("_",(Get-SQLIndexColumns -Index $prikey | Format-ColumnNameForProcedure))
    $params = [String]::Join(",`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -Prefix "pi_"))
    $docparams = [String]::Join("`t`t`tI`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -Prefix "pi_" -NoTypeInfo ))
    $colDocList = [String]::Join("$($table.Name)`r`n",(Get-SQLTableColumns -Table $table | Out-ColumnDoc))
    $colList = [String]::Join(",`r`n",(Get-SQLTableColumns -Table $table | Out-ColumnList | Add-PreText -PrependText "      "))
    $whereClause = [String]::Join(" AND `r`n",(Get-SqlIndexColumns -Index $prikey | Out-WhereClause -prefix "pi_" | Add-PreText -PrependText "      "))
    $fileContent = @"
/********************************************************************************
 Last Checked In By: `$Author`$
 Last Checked In On: `$Date`$
 URL               : `$URL`$
 Revision          : `$Rev`$
 
 Object: $($table.Schema).$procname

 ********************************************************************************/

IF EXISTS (
   SELECT   1
   FROM     INFORMATION_SCHEMA.ROUTINES
   WHERE    ROUTINE_NAME = '$procname' 
            AND ROUTINE_SCHEMA = '$($table.Schema)')
   DROP PROCEDURE $($table.Schema).$procname;
GO

/********************************************************************************
Name : $procname
Author : Auto-generated by PSAT
Description : Generic "get" procedure for table "$($table.Schema).$($table.Name)".

`$Author: `$
`$Date: `$
`$Rev: `$
`$URL: `$
===============================================================================
Parameters :
Name                                    |I/O      |     Descriptions
--------------------------------------------------------------------------------
$docparams

ResultSet:
----------------------------------------------------------------------------
$colDocList

--------------------------------------------------------------------------------

Revisions :
--------------------------------------------------------------------------------
Ini| Date       | Description
--------------------------------------------------------------------------------
CREATE PROCEDURE $($table.Schema).$procname
$params
AS

SET NOCOUNT ON;
DECLARE @Error_Message NVARCHAR(2048),
        @Error_Severity TINYINT;

BEGIN TRY

    SELECT
$colList
    FROM
        $($table.Schema).$($table.Name)
    WHERE
$whereClause

END TRY
BEGIN CATCH

    SET @Error_Message = ERROR_MESSAGE();
    SET @Error_Severity = ERROR_SEVERITY();

    RAISERROR(@Error_Message,@Error_Severity,1);

END CATCH
GO

"@
    $outputObj = New-Object PSObject -Property @{
        FileName = "Procedures\$($table.Schema).$procname.sp.sql"
        FileContent = $fileContent
    }

    Write-Output $outputObj

    #endregion
    
    #region Insert
    $procName = "Insert" + (Format-ColumnNameForProcedure -Name $table.Name)
    $docparams = [String]::Join("`t`t`tI`r`n",(Get-SQLTableColumns -Table $table -NoIdentityColumns | Out-ParameterDef -Prefix "pi_" -NoTypeInfo ))
    $params = [String]::Join(",`r`n",(Get-SQLTableColumns -Table $table -NoIdentity  | Out-ParameterDef -Prefix "pi_" -PadLength 0  ))
    $insertParams = [String]::Join(",`r`n",(Get-SQLTableColumns -Table $table -NoIdentity  | Out-ParameterDef -Prefix "pi_" -PadLength 0 -NoTypeInfo))
    $colList = [String]::Join(",`r`n",(Get-SQLTableColumns -Table $table -NoIdentity | Out-ColumnList | Add-PreText -PrependText "      "))
    $whereClause = [String]::Join(" AND `r`n",(Get-SqlIndexColumns -Index $prikey | Out-WhereClause -prefix "pi_" | Add-PreText -PrependText "    "))
    $fileContent = @"
/********************************************************************************
 Last Checked In By: `$Author`$
 Last Checked In On: `$Date`$
 URL               : `$URL`$
 Revision          : `$Rev`$
 
 Object: $($table.Schema).$procname

 ********************************************************************************/

IF EXISTS (
   SELECT   1
   FROM     INFORMATION_SCHEMA.ROUTINES
   WHERE    ROUTINE_NAME = '$procname' 
            AND ROUTINE_SCHEMA = '$($table.Schema)')
   DROP PROCEDURE $($table.Schema).$procname
GO

/********************************************************************************
Name : $procname
Author : Auto-generated by PSAT
Description : Generic "Insert" procedure for table "$($table.Schema).$($table.Name)".

`$Author: `$
`$Date: `$
`$Rev: `$
`$URL: `$
===============================================================================
Parameters :
Name                                    |I/O      |     Description
--------------------------------------------------------------------------------
$docparams

ResultSet:
----------------------------------------------------------------------------
None

--------------------------------------------------------------------------------

Revisions :
--------------------------------------------------------------------------------
Ini| Date       | Description
--------------------------------------------------------------------------------
CREATE PROCEDURE $($table.Schema).$procname
$params
AS

SET NOCOUNT ON;
DECLARE @Error_Message NVARCHAR(2048),
        @Error_Severity TINYINT;

BEGIN TRY

  INSERT  $($table.Schema).$($table.Name)
  (
  $colList
  )
  VALUES
  (
  $insertParams
  )

END TRY
BEGIN CATCH

    SET @Error_Message = ERROR_MESSAGE();
    SET @Error_Severity = ERROR_SEVERITY();

    RAISERROR(@Error_Message,@Error_Severity,1);

END CATCH
GO

"@
    $outputObj = New-Object PSObject -Property @{
        FileName = "Procedures\$($table.Schema).$procname.sp.sql"
        FileContent = $fileContent
    }

    Write-Output $outputObj
    #endregion

    #region Update
    $procName = "Update" + (Format-ColumnNameForProcedure -Name $table.Name) + "By" + [String]::Join("_",(Get-SQLIndexColumns -Index $prikey | Format-ColumnNameForProcedure))
    $params = [String]::Join(",`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -PadLength 0 -Prefix "pi_"))
    $docparams = [String]::Join("`t`t`tI`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -Prefix "pi_" -PadLength 0 -NoTypeInfo))
    $colList = [String]::Join(",`r`n",(Get-SqlTableColumns -Table $table -NoIdentity | Out-WhereClause -prefix "pi_" | Add-PreText -PrependText "    "))
    $whereClause = [String]::Join(" AND `r`n",(Get-SqlIndexColumns -Index $prikey | Out-WhereClause -prefix "pi_" | Add-PreText -PrependText "    "))
    $fileContent = @"
/********************************************************************************
 Last Checked In By: `$Author`$
 Last Checked In On: `$Date`$
 URL               : `$URL`$
 Revision          : `$Rev`$
 
 Object: $($table.Schema).$procname

 ********************************************************************************/

IF EXISTS (
   SELECT   1
   FROM     INFORMATION_SCHEMA.ROUTINES
   WHERE    ROUTINE_NAME = '$procname' 
            AND ROUTINE_SCHEMA = '$($table.Schema)')
   DROP PROCEDURE $($table.Schema).$procname
GO

/********************************************************************************
Name : $procname
Author : Auto-generated by PSAT
Description : Generic "Update" procedure for table "$($table.Schema).$($table.Name)".

`$Author: `$
`$Date: `$
`$Rev: `$
`$URL: `$
===============================================================================
Parameters :
Name                                    |I/O      |     Description
--------------------------------------------------------------------------------
$docparams

ResultSet:
----------------------------------------------------------------------------
None

--------------------------------------------------------------------------------

Revisions :
--------------------------------------------------------------------------------
Ini| Date       | Description
--------------------------------------------------------------------------------
CREATE PROCEDURE $($table.Schema).$procname
AS

SET NOCOUNT ON;
DECLARE @Error_Message NVARCHAR(2048),
        @Error_Severity TINYINT;

BEGIN TRY

  UPDATE
    $($table.Schema).$($table.Name)
  SET  
  $colList
  WHERE
  $whereClause

END TRY
BEGIN CATCH

    SET @Error_Message = ERROR_MESSAGE();
    SET @Error_Severity = ERROR_SEVERITY();

    RAISERROR(@Error_Message,@Error_Severity,1);

END CATCH
GO

"@
    $outputObj = New-Object PSObject -Property @{
        FileName = "Procedures\$($table.Schema).$procname.sp.sql"
        FileContent = $fileContent
    }

    Write-Output $outputObj
    
    #endregion Update
    #region Delete
    $procName = "Delete" + (Format-ColumnNameForProcedure -Name $table.Name) + "By" + [String]::Join("_",(Get-SQLIndexColumns -Index $prikey | Format-ColumnNameForProcedure))
    $params = [String]::Join(",`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -PadLength 0 -Prefix "pi_"))
    $docparams = [String]::Join("`t`t`tI`r`n",(Get-SQLIndexColumns -Index $prikey | Out-ParameterDef -Prefix "pi_" -PadLength 0 -NoTypeInfo))
    $whereClause = [String]::Join(" AND `r`n",(Get-SqlIndexColumns -Index $prikey | Out-WhereClause -prefix "pi_" | Add-PreText -PrependText "    "))
    $fileContent = @"
/********************************************************************************
 Last Checked In By: `$Author`$
 Last Checked In On: `$Date`$
 URL               : `$URL`$
 Revision          : `$Rev`$
 
 Object: $($table.Schema).$procname

 ********************************************************************************/

IF EXISTS (
   SELECT   1
   FROM     INFORMATION_SCHEMA.ROUTINES
   WHERE    ROUTINE_NAME = '$procname' 
            AND ROUTINE_SCHEMA = '$($table.Schema)')
   DROP PROCEDURE $($table.Schema).$procname
GO

/********************************************************************************
Name : $procname
Author : Auto-generated by PSAT
Description : Generic "Update" procedure for table "$($table.Schema).$($table.Name)".

`$Author: `$
`$Date: `$
`$Rev: `$
`$URL: `$
===============================================================================
Parameters :
Name                                    |I/O      |     Description
--------------------------------------------------------------------------------
$docparams

ResultSet:
----------------------------------------------------------------------------
None

--------------------------------------------------------------------------------

Revisions :
--------------------------------------------------------------------------------
Ini| Date       | Description
--------------------------------------------------------------------------------
CREATE PROCEDURE $($table.Schema).$procname
AS

SET NOCOUNT ON;
DECLARE @Error_Message NVARCHAR(2048),
        @Error_Severity TINYINT;

BEGIN TRY

  DELETE 
  FROM 
    $($table.Schema).$($table.Name)
  WHERE
  $whereClause

END TRY
BEGIN CATCH

    SET @Error_Message = ERROR_MESSAGE();
    SET @Error_Severity = ERROR_SEVERITY();

    RAISERROR(@Error_Message,@Error_Severity,1);

END CATCH

GO

"@
    $outputObj = New-Object PSObject -Property @{
        FileName = "Procedures\$($table.Schema).$procname.sp.sql"
        FileContent = $fileContent
    }

    Write-Output $outputObj
    
    #endregion

}