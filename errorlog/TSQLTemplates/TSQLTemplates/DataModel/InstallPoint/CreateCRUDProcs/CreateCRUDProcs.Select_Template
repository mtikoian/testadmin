IF NOT EXISTS
     (SELECT 1
      FROM   information_schema.routines
      WHERE  routine_schema = N'#SCHEMA#' AND routine_name = N'#PROC#')
  BEGIN
    RAISERROR('Creating stub procedure "%s.%s".',10,1,'#SCHEMA#','#PROC#') WITH NOWAIT;

    DECLARE @stmnt NVARCHAR(200);
    SET @stmnt = N'CREATE PROCEDURE #SCHEMA#.#PROC# As Raiserror(''This is a stub routine and should not exist or be used'',16,1)';
    EXEC sp_executesql @stmnt;

    IF (@@ERROR <> 0)
      BEGIN
        RAISERROR('ERROR: Unable to create stub procedure "%s.%s".',16,1,'#SCHEMA#','#PROC#');
      END;
  END
ELSE
  BEGIN
    RAISERROR('Procedure "%s.%s" exists.',10,1,'#SCHEMA#','#PROC#') WITH NOWAIT;
  END;
go

Alter PROCEDURE #SCHEMA#.#PROC# (
   #GENERATE_PARAMETERS#
) AS
BEGIN
/***
=pod

=begin text

   ================================================================================
   Name : #PROC#
   Author : #USERNAME# #DATETIME#
   Description : Selects a row from #SCHEMA#.#TABLE# table

   Revision: $Rev$
   URL: $URL$
   Last Checked in: $Author$
   ===============================================================================
   Parameters :
   Name                                | I/O | Description
   #GENERATE_PARAMETERSDOC#
   
   --------------------------------------------------------------------------------
   Error Reason codes: 

       1 - No rows qualified for the select

   --------------------------------------------------------------------------------
   Return Value: 0
   Success : 0
   Failure : Non zero error log id from the ErrorLog table.

   Revisions :
   --------------------------------------------------------------------------------
   Ini    | Date          | Description
   --------------------------------------------------------------------------------
   #USERNAME#  #DATETIME#       Initial version.
   ================================================================================

=end text

=cut
***/

        -- Return code from called stored procedures.
        DECLARE @ReturnCode   INT;

        -- Log_Detail.Log_Detail_ID
        DECLARE @po_Log_Detail_ID INT;

     	  -- Log Level (LL) Error
   	  DECLARE @LL_Error   SMALLINT;
   	  -- Log Level (LL) Warning
   	  DECLARE @LL_Warning   SMALLINT;
   	  -- Log Level (LL) Info
   	  DECLARE @LL_Info   SMALLINT;
   	  -- Log Level (LL) Debug
   	  DECLARE @LL_Debug   SMALLINT;

        -- Initialize Variables
        -- --------------------
        -- Error Reason Code
        SET @po_Error_Reason_Cd = 0;

        -- Return code from called stored procedures
        SET @ReturnCode = 0;

        -- On failure of validation check, the error reason code for the failure.
        SET @po_Error_Reason_Cd = 0;
	
        -- Log Level (LL) Error
        SET @LL_Error              = 1;
        -- Log Level (LL) Warning
        SET @LL_Warning            = 2;
        -- Log Level (LL) Info
        SET @LL_Info               = 3;
        -- Log Level (LL) Debug
        SET @LL_Debug              = 4;

        -- Stops the message that shows the count of the number of rows affected by a
        -- Transact-SQL statement or stored procedure from being returned as part of the result set
        SET  NOCOUNT ON;

        /*
        #GENERATE_TABLEDOC#
        */

        BEGIN TRY
            -- Validate all the parameters.
            -- Set the @po_Error_Reason_Cd and @ReturnCode based on validation results.


            -- Validation code here


            -- If we did not pass validation of the parameters, set the reason code and return value.
            IF ((@po_Error_Reason_Cd <> 0) OR (@ReturnCode <> 0))
            BEGIN
                RETURN @ReturnCode;
            END;

            -- Select a row
            #GENERATE_SELECTSQL#

            -- Make sure we selected at least one row
            IF (@@ROWCOUNT = 0)
            BEGIN
                -- No row qualified for selection based on where clause
                SET @po_Error_Reason_Cd = 1;
            END;

        END TRY
        BEGIN CATCH
            -- Print the error information
            EXECUTE #SCHEMA#.p_admPrintError ;

            -- Roll back any active or uncommittable transactions before
            -- inserting information in the ErrorLog.
            -- XACT_STATE = 0 means there is no transaction and a commit or rollback operation would generate an error.
            -- XACT_STATE = -1 The transaction is in an uncommittable state
            IF XACT_STATE () <> 0
                BEGIN
                    ROLLBACK TRANSACTION;
                END;

            -- Log error to the ErrorLog table
            Exec #SCHEMA#.LogEntry 
               @LL_Error,                       -- Log_Level_ID
               NULL,                            -- Organization_ID
               NULL,                            -- UserID
               '#PROC#',                        -- Procedure_Name
               'Procedure failure catch block', -- Log_Detail_Text
               0,                               -- Log_Diagnostic_Num
               'CATCH',                         -- Log_Reference_Tag
               @po_Log_Detail_ID = @po_Log_Detail_ID out,      -- Log_Detail_ID
               @po_Error_Reason_Cd = @po_Error_Reason_Cd out;  -- Error_Reason_Cd

            Set @ReturnCode = @po_Log_Detail_ID;
        END CATCH;

        RETURN @ReturnCode;
    END;
GO

IF EXISTS
       (SELECT 1
          FROM INFORMATION_SCHEMA.ROUTINES
         WHERE ROUTINE_SCHEMA = '#SCHEMA#' AND ROUTINE_NAME = '#PROC#')
    BEGIN
        RAISERROR('Altered procedure "%s.%s".',10,1,'#SCHEMA#','#PROC#') WITH NOWAIT;

	begin try
	        EXEC sp_dropextendedproperty @name  = 'SVN Revision',
		                            @level0type = 'SCHEMA',
		                            @level0name = '#SCHEMA#',
		                            @level1type = 'PROCEDURE',
		                            @level1name = '#PROC#';
	end try
	begin catch
		set nocount on;
	end catch;

	begin try
	        EXEC sp_dropextendedproperty @name  = 'MS_Description',
		                            @level0type = 'SCHEMA',
		                            @level0name = '#SCHEMA#',
		                            @level1type = 'Procedure',
		                            @level1name = '#PROC#';
	end try
	begin catch
		set nocount on;
	end catch;

        EXEC sp_addextendedproperty @name  = 'SVN Revision',
	                            @value      = '$Rev$',
	                            @level0type = 'SCHEMA',
	                            @level0name = '#SCHEMA#',
	                            @level1type = 'PROCEDURE',
	                            @level1name = '#PROC#';

        EXEC sp_addextendedproperty @name  = 'MS_Description',
	                            @value      = '#SCHEMA#.#PROC# performs a select of a row from the #SCHEMA#.#TABLE#',
	                            @level0type = 'SCHEMA',
	                            @level0name = '#SCHEMA#',
	                            @level1type = 'Procedure',
	                            @level1name = '#PROC#';
    END
ELSE
    BEGIN
        RAISERROR('ERROR: Unable to alter procedure "%s.%s".',16,1,'#SCHEMA#','#PROC#');
    END;
GO

